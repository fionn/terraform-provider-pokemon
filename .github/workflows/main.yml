name: CI

on: push

jobs:

  build:

    name: Build
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Download dependencies
        run: go mod download

      - name: Build
        run: go build -v

      - name: Build documentation
        run: go generate ./...
        working-directory: tools

  lint:

    name: Lint
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Check formatting
        run: test -z "$(gofmt -l .)"

      - name: Lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.61.0

  test:

    name: Test
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Download dependencies
        run: go mod download

      - name: Test
        run: go test -count=1 -v
        env:
          TF_ACC: 1
        working-directory: internal/provider

  release:

    name: Release
    needs: ["build", "lint", "test"]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    environment: release

    permissions:
      contents: write

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Import PGP key
        id: pgp
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.PGP_PRIVATE_KEY }}
          passphrase: ${{ secrets.PGP_PASSPHRASE }}

      - name: Release
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ github.token }}
          PGP_FINGERPRINT: ${{ steps.pgp.outputs.fingerprint }}
